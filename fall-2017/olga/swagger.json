{
  "swagger": "2.0",
  "info": {
    "description": "This is the task API.",
    "version": "1.0.0",
    "title": "Swagger Task api",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/v2",
  "tags": [
    {
      "name": "task",
      "description": "tasks"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a new user",
        "operationId": "addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user Successfully added. return userId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "405": {
            "description": "Invalid input for user"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get all users",
        "description": "Find users",
        "operationId": "getUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "if users found, return list of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          },
          "404": {
            "description": "user not found"
          },
          "405": {
            "description": "Invalid input for user"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get user id",
        "description": "find a userid",
        "operationId": "getUserId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success! Found user. ",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "404": {
            "description": "userid not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Add id for user",
        "description": "",
        "operationId": "addUserId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "User id that needs to be added",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "user",
            "description": "user object",
            "required": true,
            "schema": {
              "$ref": "#definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "userid successfully added to this user."
          },
          "404": {
            "description": "userId not found"
          },
          "405": {
            "description": "Invalid input."
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete this user",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user that needs to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted"
          },
          "404": {
            "description": "Id not found"
          }
        }
      }
    },
    "/user/{userId}/task": {
      "get": {
        "tags": [
          "task"
        ],
        "summary": "request only the tasks for this user",
        "operationId": "getUserTasks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "User tasks found. Returning list of tasks.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/task"
              }
            }
          },
          "404": {
            "description": "userId not found"
          }
        }
      },
      "post": {
        "tags": [
          "task"
        ],
        "summary": "Add new task for user",
        "operationId": "addTaskToUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "user id that needs to be given a task",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "task",
            "description": "task object",
            "required": true,
            "schema": {
              "$ref": "#definitions/task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Task added to user. Returning task Id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "404": {
            "description": "not found"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/user/{userId}/task/{taskId}": {
      "get": {
        "tags": [
          "task"
        ],
        "summary": "request the task for this taskID that belongs to given user",
        "operationId": "getTaskIdforTask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success! TaskId found. Returning task for this taskID.",
            "schema": {
              "$ref": "#definitions/task"
            }
          },
          "404": {
            "description": "userId or TaskId not found"
          },
          "405": {
            "description": "Invalid input for ID"
          }
        }
      },
      "put": {
        "tags": [
          "task"
        ],
        "summary": "add task id to this task",
        "operationId": "addTaskId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "task",
            "in": "body",
            "description": "task object",
            "schema": {
              "$ref": "#definitions/task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success! Id added for this task belonging to this user."
          },
          "404": {
            "description": "not found."
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "task"
        ],
        "summary": "Delete task",
        "description": "",
        "operationId": "deleteTask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task that needs to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user for this task",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Task has been successfully deleted."
          },
          "404": {
            "description": "Id not found"
          },
          "405": {
            "description": "invalid input."
          }
        }
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "tasks": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "task": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "New",
            "In Progress",
            "Blocked",
            "Completed"
          ]
        },
        "userid": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}